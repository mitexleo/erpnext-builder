name: Build ERPNext Custom Image on New Releases

on:
  schedule:
    - cron: "0 */6 * * *" # every 6 hours
  workflow_dispatch: # manual trigger

env:
  DOCKER_IMAGE: mitexleo/syserp

permissions:
  contents: write # Allows pushing commits (update files)
  packages: write # Allows pushing Docker images if using GitHub Packages (optional)

jobs:
  check-and-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install jq and curl
        run: |
          sudo apt-get update && sudo apt-get install -y jq curl

      - name: Read apps.json into repos
        id: read_apps
        run: |
          # Extract repo URLs and normalize to owner/repo format
          REPOS=$(jq -r '.[] | .url' apps.json | sed -E 's|https://github.com/([^/]+/[^/]+).*|\1|' | tr '\n' ' ')
          # Add frappe/frappe separately since it's not in apps.json but needs version monitoring
          REPOS="frappe/frappe $REPOS"
          echo "repos=$REPOS" >> $GITHUB_OUTPUT

      - name: Check for new releases
        id: check_releases
        run: |
          CHANGED=false
          NEW_VERSIONS=$(cat REPO_VERSIONS.json)

          for repo in ${{ steps.read_apps.outputs.repos }}
          do
            LATEST_TAG=$(curl -s https://api.github.com/repos/$repo/releases/latest | jq -r .tag_name)
            if [ "$LATEST_TAG" = "null" ]; then
              echo "No release found for $repo, skipping..."
              continue
            fi

            CURRENT_TAG=$(jq -r --arg r "$repo" '.[$r]' REPO_VERSIONS.json)
            echo "Repo: $repo"
            echo "Current tag: $CURRENT_TAG"
            echo "Latest tag: $LATEST_TAG"

            if [ "$LATEST_TAG" != "$CURRENT_TAG" ]; then
              echo "New release detected for $repo!"
              NEW_VERSIONS=$(echo "$NEW_VERSIONS" | jq --arg r "$repo" --arg t "$LATEST_TAG" '.[$r]=$t')
              CHANGED=true
            fi
          done

          echo "$NEW_VERSIONS" > REPO_VERSIONS.json
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      - name: Stop if no new release
        if: steps.check_releases.outputs.changed != 'true'
        run: |
          echo "No new releases detected. Exiting workflow."
          exit 0

      - name: Base64 encode apps.json
        run: |
          APPS_JSON_BASE64=$(base64 -w 0 apps.json)
          echo "APPS_JSON_BASE64=$APPS_JSON_BASE64" >> $GITHUB_ENV

      - name: Clone frappe_docker
        run: git clone https://github.com/frappe/frappe_docker

      - name: Increment image version
        id: version
        run: |
          CURRENT_VERSION=$(cat VERSION)
          echo "Current version: $CURRENT_VERSION"
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          NEW_PATCH=$((patch + 1))
          NEW_VERSION="$major.$minor.$NEW_PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "$NEW_VERSION" > VERSION

      - name: Commit updated files
        if: steps.check_releases.outputs.changed == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add REPO_VERSIONS.json VERSION
          git commit -m "Update release tags and bump version to ${{ env.NEW_VERSION }}"
          git push

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          cd frappe_docker
          docker build \
            --build-arg=FRAPPE_PATH=https://github.com/frappe/frappe \
            --build-arg=FRAPPE_BRANCH=version-15 \
            --build-arg=APPS_JSON_BASE64=${{ env.APPS_JSON_BASE64 }} \
            --tag=${{ env.DOCKER_IMAGE }}:${{ env.NEW_VERSION }} \
            --tag=${{ env.DOCKER_IMAGE }}:latest \
            --file=images/layered/Containerfile .

      - name: Push Docker image
        run: |
          docker push ${{ env.DOCKER_IMAGE }}:${{ env.NEW_VERSION }}
          docker push ${{ env.DOCKER_IMAGE }}:latest
