name: Build ERPNext Custom Image on New Releases

on:
  schedule:
    - cron: "0 */6 * * *" # every 6 hours
  workflow_dispatch: # manual trigger
    inputs:
      force_build:
        description: "Force build even if no new releases detected"
        required: false
        default: false
        type: boolean

env:
  DOCKER_IMAGE: mitexleo/syserp

permissions:
  contents: write # Allows pushing commits (update files)
  packages: write # Allows pushing Docker images if using GitHub Packages (optional)

jobs:
  check-releases:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check_releases.outputs.changed }}
      new_version: ${{ steps.version.outputs.new_version }}
      apps_json_base64: ${{ steps.encode_apps.outputs.apps_json_base64 }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install jq and curl
        run: |
          sudo apt-get update && sudo apt-get install -y jq curl

      - name: Validate required files
        id: validate_files
        run: |
          if [ ! -f "apps.json" ]; then
            echo "Error: apps.json not found"
            exit 1
          fi
          CREATED_FILES=false
          if [ ! -f "REPO_VERSIONS.json" ]; then
            echo "Creating REPO_VERSIONS.json with empty object"
            echo "{}" > REPO_VERSIONS.json
            CREATED_FILES=true
          fi
          if [ ! -f "VERSION" ]; then
            echo "Creating VERSION file with initial version"
            echo "1.0.0" > VERSION
            CREATED_FILES=true
          fi
          echo "created_files=$CREATED_FILES" >> $GITHUB_OUTPUT

      - name: Commit initial files if created
        if: steps.validate_files.outputs.created_files == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add REPO_VERSIONS.json VERSION
          git commit -m "Initialize REPO_VERSIONS.json and VERSION files" || true
          git push || true

      - name: Read apps.json into repos
        id: read_apps
        run: |
          # Extract repo URLs and normalize to owner/repo format
          REPOS=$(jq -r '.[] | .url' apps.json | sed -E 's|https://github.com/([^/]+/[^/]+).*|\1|' | tr '\n' ' ')
          # Add frappe/frappe separately since it's not in apps.json but needs version monitoring
          REPOS="frappe/frappe $REPOS"
          echo "repos=$REPOS" >> $GITHUB_OUTPUT

      - name: Check for new releases
        id: check_releases
        run: |
          CHANGED=false
          NEW_VERSIONS=$(cat REPO_VERSIONS.json)

          for repo in ${{ steps.read_apps.outputs.repos }}
          do
            echo "Checking releases for $repo..."

            # Get all releases and filter for v15.x versions for frappe repos
            if [[ "$repo" == "frappe/frappe" || "$repo" == "frappe/erpnext" || "$repo" == "frappe/hrms" ]]; then
              echo "Filtering for v15.x releases for $repo"
              API_RESPONSE=$(curl -s -f "https://api.github.com/repos/$repo/releases" 2>/dev/null || echo "[]")
              LATEST_TAG=$(echo "$API_RESPONSE" | jq -r '[.[] | select(.tag_name | startswith("v15.")) | .tag_name][0] // empty')
            else
              # For non-frappe repos, get latest release normally
              API_RESPONSE=$(curl -s -f "https://api.github.com/repos/$repo/releases/latest" 2>/dev/null || echo "null")
              if [ "$API_RESPONSE" = "null" ]; then
                echo "No release found for $repo, skipping..."
                continue
              fi
              LATEST_TAG=$(echo "$API_RESPONSE" | jq -r '.tag_name // empty')
            fi

            if [ -z "$LATEST_TAG" ]; then
              echo "No valid v15.x tag found for $repo, skipping..."
              continue
            fi

            # Handle case where repo doesn't exist in REPO_VERSIONS.json yet
            CURRENT_TAG=$(jq -r --arg r "$repo" '.[$r] // empty' REPO_VERSIONS.json)
            if [ -z "$CURRENT_TAG" ]; then
              CURRENT_TAG="none"
            fi

            echo "Repo: $repo"
            echo "Current tag: $CURRENT_TAG"
            echo "Latest tag: $LATEST_TAG"

            if [ "$LATEST_TAG" != "$CURRENT_TAG" ]; then
              echo "New release detected for $repo: $CURRENT_TAG -> $LATEST_TAG"
              NEW_VERSIONS=$(echo "$NEW_VERSIONS" | jq --arg r "$repo" --arg t "$LATEST_TAG" '.[$r]=$t')
              CHANGED=true
            fi
          done

          echo "$NEW_VERSIONS" > REPO_VERSIONS.json

          # Check if force build is requested
          if [ "${{ github.event.inputs.force_build }}" = "true" ]; then
            echo "Force build requested via manual trigger"
            CHANGED=true
          fi

          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

          if [ "$CHANGED" = "false" ]; then
            echo "No new releases detected. Build will be skipped."
          else
            echo "New releases detected or force build requested. Proceeding with build."
          fi

      - name: Increment image version
        if: steps.check_releases.outputs.changed == 'true'
        id: version
        run: |
          CURRENT_VERSION=$(cat VERSION)
          echo "Current version: $CURRENT_VERSION"
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          NEW_PATCH=$((patch + 1))
          NEW_VERSION="$major.$minor.$NEW_PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "$NEW_VERSION" > VERSION
          if [ "${{ github.event.inputs.force_build }}" = "true" ]; then
            echo "Version bumped to: $NEW_VERSION (force build)"
          else
            echo "Version bumped to: $NEW_VERSION"
          fi

      - name: Base64 encode apps.json
        if: steps.check_releases.outputs.changed == 'true'
        id: encode_apps
        run: |
          APPS_JSON_BASE64=$(base64 -w 0 apps.json)
          echo "apps_json_base64=$APPS_JSON_BASE64" >> $GITHUB_OUTPUT

      - name: Commit updated files
        if: steps.check_releases.outputs.changed == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add REPO_VERSIONS.json VERSION
          if [ "${{ github.event.inputs.force_build }}" = "true" ]; then
            git commit -m "Force build: bump version to ${{ steps.version.outputs.new_version }}"
          else
            git commit -m "Update release tags and bump version to ${{ steps.version.outputs.new_version }}"
          fi
          git push

  build-and-push:
    needs: check-releases
    if: needs.check-releases.outputs.has_changes == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Pull latest changes
        run: |
          git fetch origin
          git reset --hard origin/main

      - name: Clone frappe_docker
        run: git clone https://github.com/frappe/frappe_docker

      - name: Debug frappe_docker contents
        run: |
          echo "--- Listing contents of frappe_docker ---"
          ls -R frappe_docker
          echo "----------------------------------------"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Debug apps.json encoding
        run: |
          echo "=== Original apps.json ==="
          cat apps.json
          echo ""
          echo "=== Base64 encoded ==="
          base64 -w 0 apps.json
          echo ""
          echo "=== From workflow output ==="
          echo "${{ needs.check-releases.outputs.apps_json_base64 }}"
          echo ""
          echo "=== Decoded from workflow ==="
          echo "${{ needs.check-releases.outputs.apps_json_base64 }}" | base64 -d

      - name: Build Docker image with retry
        uses: docker/build-push-action@v6
        with:
          file: ./frappe_docker/images/layered/Containerfile
          build-args: |
            FRAPPE_PATH=https://github.com/frappe/frappe
            FRAPPE_BRANCH=version-15
            APPS_JSON_BASE64=${{ needs.check-releases.outputs.apps_json_base64 }}
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ needs.check-releases.outputs.new_version }}
            ${{ env.DOCKER_IMAGE }}:latest
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          network: host
          platforms: linux/amd64

      - name: Build summary
        run: |
          echo "âœ… Successfully built and pushed Docker images:"
          echo "   - ${{ env.DOCKER_IMAGE }}:${{ needs.check-releases.outputs.new_version }}"
          echo "   - ${{ env.DOCKER_IMAGE }}:latest"
